openapi: 3.0.1
info:
  title: G-Obs API
  description: G-obs API as OpenAPI Rest API !
  termsOfService: ""
  contact:
    email: info@3liz.com
  license:
    name: Mozilla Public Licence 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: 1.0.0
externalDocs:
  description: Find out more about G-Obs
  url: https://3liz.github.io/qgis-gobs-plugin/
servers:
- url: https://gobs.3liz.com/1.0.0
tags:
- name: user
  description: Operations about user
- name: project
  description: Project
- name: indicator
  description: Indicator
- name: observation
  description: Field observation
paths:
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      security: []    # no authentication
      responses:
        200:
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `PHPSESSID`. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: PHPSESSID=abcde12345; Path=/; HttpOnly                      
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/projects:
    get:
      tags:
      - user
      summary: Get projects for the given user
      description: User login must be passed.
      operationId: findProjectByUser
      parameters:
      - name: project
        in: query
        description: Project key
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: Invalid indicator value
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /project/{projectKey}:
    get:
      tags:
      - project
      summary: Get project by key
      description: Returns a single project
      operationId: getProjectByKey
      parameters:
      - name: projectKey
        in: path
        description: Key of the project to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Invalid key supplied
          content: {}
        404:
          description: Project not found
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /project/{projectKey}/indicators:
    get:
      tags:
      - project
      summary: Get the indicators for a given project
      description: Project key must be given in the path.
      operationId: getProjectIndicators
      parameters:
      - name: projectKey
        in: path
        description: Project key to filter by.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndicatorDocument'
        400:
          description: Invalid indicator value
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /indicator/{indicatorId}:
    get:
      tags:
      - indicator
      summary: Get indicator by id
      description: Returns a single indicator
      operationId: getIndicatorById
      parameters:
      - name: indicatorId
        in: path
        description: ID of indicator to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Indicator'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Indicator not found
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /indicator/{indicatorId}/documents:
    get:
      tags:
      - indicator
      summary: Get the documents for a given indicator
      description: Indicator id must be given in the path.
      operationId: getIndicatorDocuments
      parameters:
      - name: indicatorId
        in: path
        description: Indicator ID to filter by
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndicatorDocument'
        400:
          description: Invalid indicator value
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /indicator/{indicatorId}/observations:
    get:
      tags:
      - indicator
      summary: Get observations by indicator
      description: Indicator id must be given in the path.
      operationId: findObservationByIndicator
      parameters:
      - name: indicatorId
        in: path
        description: Indicator ID to filter by
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
        400:
          description: Invalid indicator value
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
          
  /observation:
    post:
      tags:
      - observation
      summary: Add a new observation to G-Obs
      operationId: addObservation
      requestBody:
        description: Observation object that needs to be added to G-Obs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
        required: true
      responses:
        401:
           $ref: '#/components/responses/UnauthorizedError'
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
    put:
      tags:
      - observation
      summary: Update an existing observation
      operationId: updateObservation
      requestBody:
        description: Observation object that needs to be added to G-obs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Observation not found
          content: {}
        405:
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body      
  /observation/{observationId}:
    get:
      tags:
      - observation
      summary: Find observation by ID
      description: Returns a single observation
      operationId: getObservationById
      parameters:
      - name: observationId
        in: path
        description: ID of observation to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        400:
          description: Invalid ID supplied
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Observation not found
          content: {}
    post:
      tags:
      - observation
      summary: Updates a observation in the store with form data
      operationId: updateObservationWithForm
      parameters:
      - name: observationId
        in: path
        description: ID of observation that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the observation
                status:
                  type: string
                  description: Updated status of the observation
      responses:
        401:
           $ref: '#/components/responses/UnauthorizedError'
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - observation
      summary: Deletes an observation
      operationId: deleteObservation
      parameters:
      - name: observationId
        in: path
        description: Observation id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid ID supplied
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Observation not found
          content: {}
  /observation/{observationId}/uploadMedia:
    post:
      tags:
      - observation
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: observationId
        in: path
        description: ID of observation to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                imageDate:
                  type: string
                fileName:
                  type: string
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
           $ref: '#/components/responses/UnauthorizedError'
  /observation/{observationId}/deleteMedia:
    delete:
      tags:
      - observation
      summary: delete a media for the observation
      operationId: deleteObservationMedia
      parameters:
      - name: observationId
        in: path
        description: ID of observation for which to delete media
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
        400:
          description: Invalid ID supplied
          content: {}
        401:
           $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Observation not found
          content: {} 

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Project:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        description:
          type: string
        media_url:
          type: string
      xml:
        name: Project   
    IndicatorValue:
      type: object
      properties:
        code:
          type: string
          description: code of the vector dimension
        name:
          type: string
          description: name of the vector dimension
        type:
          type: string
          description: Format of the stored value
          enum:
          - integer
          - string
          - boolean
          - real
        unit:
          type: string
          description: unit of the stored value
      xml:
        name: IndicatorValue
    IndicatorDocument:
      type: object
      properties:
        id:
          type: integer
          format: int64
        indicator:
          type: integer
          description: Id of the indicator
          format: int64
        label:
          type: string
          description: Label of the document
        description:
          type: string
          description: Full description of the document
        type:
          type: string
          description: Type of the document
          enum:
          - image
          - video
          - document
          - other
        url:
          type: string
          description: Url of the document
      xml:
        name: IndicatorDocument   
    Indicator:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          format: int64
        label:
          type: string
          description: Label of the indicator
        description:
          type: string
          description: Description of the indicator
        date_format:
          type: string
          description: Date format
        values:
          type: array
          description: List of value for the indicator
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/IndicatorValue'
        documents:
          type: array
          description: List of documents for the indicator
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/IndicatorDocument'
        avatar:
          type: string
          description: Url of the image illustrating the indicator
        color:
          type: string
          description: Main color of the indicator
      xml:
        name: Indicator   
    ObservationValue:
      type: object
      properties:
        name:
          type: string
          description: name of the vector dimension
        type:
          type: string
          description: Format of the value
          enum:
          - integer
          - string
          - boolean
          - real
        value:
          type: string
          description: data
      xml:
        name: ObservationValue
    Observation:
      required:
      - timestamp
      - values
      - x
      - y
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: string
          description: Date and time of the observation
        x:
          type: number
          description: Longitude of the observation
        y:
          type: number
          description: Latitude of the observation
        values:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ObservationValue'
        photo:
          type: string
      xml:
        name: Observation 
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string        
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: PHPSESSID
security:
  - cookieAuth: []
